@page "/selectgrid"

<style>
    /* 텍스트 선택 방지 클래스 */
    .no-text-select {
        user-select: none;
        -webkit-user-select: none; /* Safari */
        -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* IE/Edge */
    }
</style>

<h3>GridTest</h3>
<MudPaper Class="pa-4" Style="height: 100vh;" @onkeydown="HandleKeyDown" @onkeyup="HandleKeyUp" tabindex="0">
    <!-- MudDataGrid: 문자열 목록을 보여주는 그리드, 다중 선택 가능 -->
    <MudDataGrid T="string"
                 Items="@Items"
                 MultiSelection="true"
                 RowClick="OnRowClick"
                 RowStyleFunc="RowStyleFunc"
                 Class="no-text-select">
        <Columns>
            <!-- 단일 문자열 속성만 표시 -->
            <PropertyColumn Property="x => x" Title="항목" />
        </Columns>
    </MudDataGrid>
</MudPaper>

@code {
    // 데이터 목록: "항목 1"부터 "항목 100"까지
    private List<string> Items = Enumerable.Range(1, 100).Select(i => $"항목 {i}").ToList();

    // 선택된 항목 목록
    private List<string> SelectedItems = new();

    // 마지막으로 클릭한 항목의 인덱스 (Shift 클릭 범위 지정용)
    private int? _lastSelectedIndex = null;

    // Shift 키가 눌렸는지 여부
    private bool _isShiftPressed = false;

    // 키 누름 이벤트 처리기 (Shift 키 체크용)
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Shift")
        {
            _isShiftPressed = true;
        }
    }

    // 키 떼기 이벤트 처리기 (Shift 키 해제용)
    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Shift")
        {
            _isShiftPressed = false;
        }
    }

    // 행 클릭 이벤트 처리기
    private void OnRowClick(DataGridRowClickEventArgs<string> args)
    {
        var clickedItem = args.Item;
        var clickedIndex = Items.IndexOf(clickedItem);

        if (_isShiftPressed && _lastSelectedIndex.HasValue)
        {
            // Shift 키가 눌린 상태에서 클릭 시 다중 범위 선택
            var start = Math.Min(_lastSelectedIndex.Value, clickedIndex);
            var end = Math.Max(_lastSelectedIndex.Value, clickedIndex);

            if (start == end) return;

            for (int i = start; i <= end; i++)
            {
                var item = Items[i];
                if (Items.IndexOf(item) == _lastSelectedIndex) continue;

                if (!SelectedItems.Contains(item))
                {
                    // 선택되지 않은 항목이면 추가
                    SelectedItems.Add(item);
                }
                else
                {
                    // 이미 선택된 항목이면 제거 (토글 효과)
                    SelectedItems.Remove(item);
                }
            }
        }
        else
        {
            // 단일 클릭 시 항목 선택/해제 및 마지막 선택 인덱스 저장
            if (SelectedItems.Contains(clickedItem))
            {
                SelectedItems.Remove(clickedItem);
            }
            else
            {
                SelectedItems.Add(clickedItem);
            }

            _lastSelectedIndex = clickedIndex;
        }
    }

    // 각 행의 스타일 지정 함수
    private string RowStyleFunc(object? item, int index)
    {
        if (SelectedItems.Contains(item))
        {
            // 선택된 항목에 강조 스타일 적용
            return "background-color: #BBDefB; border: 1px solid #1976D2; box-shadow: 0 2px 4px rgba(0,0,0,0.1);";
        }

        // 짝수/홀수 줄마다 배경색 지정
        return index % 2 == 0 ? "" : "background-color: #f5f5f5;";
    }
}
